//import android.renderscript.ScriptGroup

plugins {
    id 'com.android.application'
    id 'kotlin-android'

}
//class HelloPlugin implements Plugin<Project>{
//    @Override
//    void apply(Project project) {
//        project.task('testPlugin') << {
//            println 'hello, plugin!'
//        }
//    }
//}
//apply plugin: HelloPlugin
//task('helloTask'){
//    println('hello task')
//}

//gradle.addBuildListener(new BuildListener() {
//    void buildStarted(Gradle var1) {
//        println '开始构建'
//    }
//    void settingsEvaluated(Settings var1) {
//        println 'settings评估完成（settins.gradle中代码执行完毕）'
//        // var1.gradle.rootProject 这里访问Project对象时会报错，还未完成Project的初始化
//    }
//    void projectsLoaded(Gradle var1) {
//        println '项目结构加载完成（初始化阶段结束）'
//        println '初始化结束，可访问根项目：' + var1.gradle.rootProject
//    }
//    void projectsEvaluated(Gradle var1) {
//        println '所有项目评估完成（配置阶段结束）'
//    }
//    void buildFinished(BuildResult var1) {
//        println '构建结束 '
//    }
//})


class OuterExt {

    String outerName
    String msg
    InnerExt innerExt = new InnerExt()

    void outerName(String name) {
        outerName = name
    }

    void msg(String msg) {
        this.msg = msg
    }

    //创建内部Extension，名称为方法名 inner
//    void inner(Action<InnerExt> action) {
//        action.execute(inner)
//    }

    //创建内部Extension，名称为方法名 inner
//    void inner(ScriptGroup.Closure c) {
//        org.gradle.util.ConfigureUtil.configure(c, innerExt)
//    }

    String toString() {
        return "OuterExt[ name = ${outerName}, msg = ${msg}] " + innerExt
    }

}


class InnerExt {

    String innerName
    String msg

    void innerName(String name) {
        innerName = name
    }

    void msg(String msg) {
        this.msg = msg
    }

    String toString() {
        return "InnerExt[ name = ${innerName}, msg = ${msg}]"
    }

}

def outExt = getExtensions().create("outer", OuterExt)

outer {

    outerName "outer"
    msg "this is a outer message."

//    inner {
//        innerName "inner"
//        msg "This is a inner message."
//    }

}

task testExt  {
   doLast {
       println "======="+outExt.outerName
   }
}



android {
    compileSdk 31

    defaultConfig {
        applicationId "com.example.demo"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //支持gradle源码关联
        dependencies {
            implementation "com.android.tools.build:gradle:7.0.4"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}